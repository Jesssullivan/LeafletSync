#!/bin/bash


## @Disclaimer
# this script may or may not be avant-garde ascii art
# possibly an "it was funnier at the time" sort of deal
# may be best suited for entertaining dinner guests
#
# a shell utility to fetch stuff behind
# github or bitbucket private repositories
#
# you can obtain a new token here:
# https://github.com/settings/tokens
#
# @Author Jess Sullivan


## repo name ##
REPO="RepoName"
REPODEF="<RepoName>"

## Repo Owner ##
OWNER="TheOwner"
OWNERDEF="<TheOwner>"

## You ##
USER="You"
USERDEF="<You>"

## GitHub: release to fetch, i.e. tagged release such as 'v0.0.1' ##
## (or, just fetch everything)
REL="Fetch Everything"
RELDEF="Fetch Everything"
NOREL="Fetch Everything"

## GitHub: release archive as type ##
TYPE="tar.gz"

## GitHub: expanded source directory ##
OUTDIR="./"
OUTDIRDEF="./"

## GitHub: Your personal api token ##
TOKEN="personal-api-token"
TOKENDEF="<personal-api-token>"

## BitBucket: file to fetch, or fetch everything ##
BFILE="<Fetch Everything>"
BFILEDEF="<Fetch Everything>"
NOBFILE="<Fetch Everything>"

## Remote defaults ##
HOST="GitHub"
HOSTDEF="GitHub"
BRANCH="master"
BRANCHDEF="master"

## archive types ##
TARDEF="tar.gz"
ZIPDEF="zip"

ENV="Nope!"
ENV_DEFAULT="Nope!"

## parse: ##

trap "kill 0" EXIT

POSITIONAL=()

while [[ $# -gt 0 ]] ; do
  key="$1"
  case $key in
        -e | --env)
          ENV=$2
        shift
        shift
        ;;
        -t | --token)
        if [ ${TOKEN} == "personal-api-token" ] ; then
          TOKENDEF=$2
        fi
        shift
        shift
        ;;
        -r | --repo)
          REPODEF=$2
        shift
        shift
        ;;
        -v | --version)
          RELDEF=$2
        shift
        shift
        ;;
        -u | --user)
          USERDEF=$2
        shift
        shift
        ;;
        -a | --author)
          OWNERDEF=$2
        shift
        shift
        ;;
        -o | --out)
          OUTDIRDEF=$2
        shift
        shift
        ;;
        -bu | --b-user)
          USERDEF=$2
          HOSTDEF="BitBucket"
        shift
        shift
        ;;
        -bp | --b-pass)
          TOKENDEF=$2
        shift
        shift
        ;;
        -bb | --b-branch)
          BRANCHDEF=$2
          HOSTDEF="BitBucket"
        shift
        shift
        ;;
        -bf | --b-file)
          BFILEDEF=$2
          HOSTDEF="BitBucket"
        shift
        shift
        ;;
        *) # unknown arg
        echo -e "\n Received an unknown argument!  Exiting...\n"
        POSITIONAL+=("$1")
        exit 0
        ;;
    esac
done

## If the user passed an environment file argument, use those instead ##
if ! [[ ${ENV} == ${ENV_DEFAULT} ]] ; then
  source $ENV
fi

## chintz ##
chintzyDoomText () {
  echo " _                 __ _      _     _____                    ";
  echo "| |               / _| |    | |   /  ___|                   ";
  echo "| |     ___  __ _| |_| | ___| |_  \ \`--. _   _ _ __   ___  ";
  echo "| |    / _ \/ _\` |  _| |/ _ \ __|  \`--. \ | | | '_ \ / __|";
  echo "| |___|  __/ (_| | | | |  __/ |_  /\__/ / |_| | | | | (__   ";
  echo "\_____/\___|\__,_|_| |_|\___|\__| \____/ \__, |_| |_|\___|  ";
  echo " \                      _____________________/ |             ";
  echo "  \ Fetch from Github: /        α wιρ Σ ♥ |_@__Jess          ";
  echo "  /───────────────────/ "
  echo "  \ Your API Token    | -t |  --token | Required | = ${TOKENDEF}"
  echo "   | Your Handle      | -u |  --user  | Required | = ${USERDEF}"
  echo "   | Source Repo      | -r |  --repo  \ Required  \ = ${REPODEF}"
  echo "   | Repository Owner | -a |  --author \ Required  \ = ${OWNERDEF}"
  echo "   | Release Version  | -v |  --version | Optional | = ${RELDEF}"
  echo "  / Output Directory  | -o |  --out    / Optional  / = ${OUTDIRDEF}"
  echo " /─────────────────────────/"
  echo " \ Fetch from BitBucket:  /                                     "
  echo "  \──────────────────────/                                   "
  echo "   \  Your Handle       / -bu  /  --b-user  / ~Required | = ${USERDEF}"
  echo "    \ Your Passhrase   / -bp  / --b-pass   / ~Required / = ${TOKENDEF}"
  echo "     \ Source Branch  / -bb  / --b-branch / ~Optional / = ${BRANCHDEF}"
  echo "      \ Source File  / -bf  / --b-file   / ~Optional / = ${BFILEDEF}"
  echo "       \────────────/ "
  echo;
  }


if [ $# -eq 0 ] ; then
  read -p "
  ...You may pass a file of values with the \`-e\` flag
   on launch too, e.g. \` ./LeafletSync -e <EnvFileOfValues> \`

  LeafletSync: Do you want to load values a from file?

  If so, enter one now...:[$ENV_DEFAULT]:  " ENV
  ENV=${ENV:-$ENV_DEFAULT}
  echo
else
  ENV=$1
  shift
fi


# heh:
chintzyDoomText;

read -p " Your Handle [$USERDEF]: " USER
USER=${USER:-$USERDEF}
echo

read -p " Source Repo [$REPODEF]: " REPO
REPO=${REPO:-$REPODEF}
echo

read -p " Repo Owner [$OWNERDEF]: " OWNER
OWNER=${OWNER:-$OWNERDEF}
echo

read -p "Host: GitHub | BitBucket [$HOSTDEF]: " HOST
HOST=${HOST:-$HOSTDEF}
echo

if [[ ${HOST} == "GitHub" ]] ; then

  read -p " Your Token [$TOKENDEF]: " TOKEN
  TOKEN=${TOKEN:-$TOKENDEF}
  echo

  read -p " Release to fetch: [$RELDEF]: " REL
  REL=${REL:-$RELDEF}
  echo

  read -p " Output to fetch (e.g. /dist/*): [$OUTDIRDEF]: " OUTDIR
  OUTDIR=${OUTDIR:-$OUTDIRDEF}
  echo

fi

if [[ ${HOST} == "BitBucket" ]] ; then

  read -p " Your Passphrase: [$TOKENDEF]: " TOKEN
  TOKEN=${TOKEN:-$TOKENDEF}
  echo

  read -p " File to Fetch: [$BFILEDEF]: "  BFILE
  BFILE=${BFILE:-$BFILEDEF}
  echo

  read -p " Source Branch: [$BRANCHDEF]: " BRANCH
  BRANCH=${BRANCH:-$BRANCHDEF}
  echo

fi

# this is where we'll put the expanded source stuff:
mkdir ${OUTDIR}

# form api call:
if [[ ${HOST} == "GitHub" ]] ; then

  ## GitHub: check if token is not valid:
  if ! [[ ${TOKEN} =~ ^[0-9a-z]{40} ]] ; then

    ## GitHub: create a random example token as a sha1 string
    SHA="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1)"

    echo -e "\nFetch from Github:\n"
    echo "Hmm, ${TOKEN} does not appear to be a valid token;"
    echo "If you are trying to access a privat repo, please provide a 40 character personal GitHub API token like so:"
    echo -e "\n./LeafletSync -t ${SHA} ... \n"
    exit 0

  fi

  # we are dealing with a release:
  if ! [[ ${REL} == ${NOREL} ]] ; then

    ## archive filename ##
    OUTPUT="${REL}.${TYPE}"

    COMMAND=" -L -u ${USER}:${TOKEN} --output ${OUTDIR}${OUTPUT} https://codeload.github.com/${OWNER}/${REPO}/${TYPE}/${REL}?token=${TOKEN}"

    # let the user know what we're up to:
    echo -e "\n ...fetching release ${REL} from ${OWNER}/${REPO} with:\n \` ${COMMAND} \`"

  else

    COMMAND=" -L -u $USER:$TOKEN --output ${OUTDIR}remote.zip https://github.com/${OWNER}/${REPO}/archive/master.zip "

    # let the user know what we're up to:
    echo -e "\n ...fetching everything in ${REPO}'s master from ${OWNER}/${REPO} with:\n \` ${COMMAND} \`"

  fi

else

  if ! [[ ${BFILE} == ${NOBFILE} ]] ; then

      COMMAND=" -O -u $USER:$TOKEN  https://bitbucket.org/${OWNER}/${REPO}/raw/${BRANCH}/${BFILE}"

      # let the user know what we're up to:
      echo -e "\n ...fetching file ${FILE} from ${OWNER}/${REPO} with:\n \` ${COMMAND} \`"

    else # we arn't fetching a specific file, get everything

      COMMAND=" -u $USER:$TOKEN --output ${OUTDIR}remote.zip https://bitbucket.org/${OWNER}/${REPO}/get/master.zip"

      # let the user know what we're up to:
      echo -e "\n ...fetching everything ${FILE} from ${OWNER}/${REPO} with:\n \` ${COMMAND} \`"

  fi
fi

# execute command, wait inside trap:
curl ${COMMAND}
wait

## unpacking ##

if [[ ${BFILE} == ${NOBFILE} ]] ; then

  # we received a gzipped tarball from GitHub, expand it;
  # we are dealing with a release:
  if ! [[ ${REL} == ${NOREL} ]] ; then

    echo -e "\n ...expanding gzipped tarball..."

    # expand gzipped tar:
    tar -xvf ${OUTDIR}${OUTPUT} -C ${OUTDIR} --strip-components=1
    wait
    exit 0

  else

    echo -e "\n ...expanding zip archive..."

    unzip -o ${OUTDIR}"remote" -x ".git" -d ${OUTDIR}
    wait
    exit 0
  fi
fi
